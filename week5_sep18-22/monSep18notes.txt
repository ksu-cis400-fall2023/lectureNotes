Inheritance tutorial: due today
UML tutorial: due Tuesday

Purpose of an interface? to define a set of properties and methods
    that can be enforced on classes

Purpose of an abstract class? to define a type where some methods/properties
    are fully implemented but others are not (and are declared abstract).
    Any non-abstract child class must provide an implementation for those
    abstract members.

What do we have to do when we implement an interface?
    For each property/method defined in the interface, we must
    either provide an implementation or declare it as abstract

What do we have to do when we extend an abstract class?
    nothing...but if we don't provide an implementation for all
    abstract properties/methods from the parent class, then we must
    declare ourselves as an abstract class as well

How do we override a method/property?
    virtual in parent (or abstract, if not implemented yet)
    override in child 

Can we implement more than one interface? yes!
    We must provide an implementation (or declare as abstract)
    every property/method from every interface we are implementing

Can we extend more than one abstract class? no


Milestone 4: due Friday
    - IMenuItem (change Soda, IcedTea to have CaloriesPerEach, CaloriesTotal)
    - Topping enum/PizzaTopping class
    - General Pizza class implements IMenuItem
        - List of possible PizzaToppings
        (add all as possible, default to not on pizza)
        - General way to get calories 
    - Specialty pizzas extend Pizza
        - Add their topping to possible list, default to ON pizza
        - Don't need calories properties any more
        - Override as needed
    - Drink, Side are abstract, implement IMenuItem
        - Collect together shared info from drinks and sides
        - Make all drinks extend Drink, all side extend Side
    - Order class implements ICollection<IMenuItem>
        - Add, Remove, Contains, enumerators
        - Allows you to add items to an Order
        - Calculates subtotal, tax, total
    - Create UML diagram
    - Update old tests for changes, add Pizza and Order tests

--> you will probably want a way to get/check/update pizza toppings
--> UML can get messy - divide into sections, repeating if necessary


--> Exam 1 is next Wednesday, September 27
    --> we will review on Monday, September 25
    --> no tutorials or Milestone next week